//Реализуй метод main(String[]), который выводит в консоль true,
//если элемент содержится в переданном массиве, иначе — false.
//Массив array не должен изменять расположение своих элементов.
//Для поиска элемента в массиве нужен бинарный поиск. Чтобы это сделать,
//используй статический метод Arrays.binarySearch(int[], int) класса Arrays.
//Первым параметром нужно передать отсортированный массив, в котором выполнить поиск,
//вторым параметром — искомый элемент. Метод Arrays.binarySearch(int[], int) возвращает индекс искомого элемента, если такой элемент есть в массиве.
//Для сортировки массива можно использовать метод Arrays.sort(int[]).
//При тестировании значения переменных класса Solution будут разными.
//Требования:
//•	В методе main(String[]) не изменяй расположение элементов массива array.
//•	При вызове метода main(String[]) вывести в консоли true, если значение переменной element содержится в массиве.
//•	При вызове метода main(String[]) вывести в консоли false, если переданный элемент не содержится в массиве.
//•	В методе main(String[]) используй вызов метода Arrays.binarySearch(int[], int).
//Решение
import java.util.Arrays;
public class BinarySearch {
    public static int[] array = new int[(int)(Math.random()*20)+1];
    public static int element = (int)(Math.random()*40);
    public static void main(String[] args) {
        System.out.println(element);
        int temp;
        boolean result;
        for (int i = 0; i < array.length; i++){
            array[i] = (int)(Math.random()*40);
        }
        for (int x: array) {
            System.out.print(x + " ");
        }
        int[] temp_array = new int[array.length];
        temp_array = Arrays.copyOfRange(array,0, array.length);
        Arrays.sort(temp_array);
        temp = Arrays.binarySearch(temp_array, element);
        if(temp > 0){
            result = true;
        }else {
            result = false;
        }
        System.out.println("\n" + result);
    }
}
